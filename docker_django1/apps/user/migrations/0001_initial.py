# Generated by Django 3.1.5 on 2021-01-29 14:24

from django.conf import settings
from django.contrib.postgres.operations import TrigramExtension
from django.db import migrations, models
import django.db.models.deletion
import docker_django1.apps.core.models.operations.customIndex
import simple_history.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        TrigramExtension(),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                (
                    'last_login',
                    models.DateTimeField(
                        blank=True, null=True, verbose_name='last login'
                    ),
                ),
                (
                    'is_superuser',
                    models.BooleanField(
                        default=False,
                        help_text='Designates that this user has all permissions without explicitly assigning them.',
                        verbose_name='superuser status',
                    ),
                ),
                (
                    'created',
                    models.DateTimeField(
                        auto_now_add=True, db_index=True, verbose_name='Дата создания'
                    ),
                ),
                (
                    'modified',
                    models.DateTimeField(
                        auto_now=True, db_index=True, verbose_name='Дата изменения'
                    ),
                ),
                (
                    'deleted',
                    models.BooleanField(
                        default=False, editable=False, verbose_name='Удален'
                    ),
                ),
                (
                    'id',
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'email',
                    models.EmailField(
                        max_length=256, unique=True, verbose_name='Email'
                    ),
                ),
                (
                    'email_verified',
                    models.BooleanField(
                        default=False, verbose_name='Email подтвержден'
                    ),
                ),
                (
                    'first_name',
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name='Имя'
                    ),
                ),
                (
                    'last_name',
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name='Фамилия'
                    ),
                ),
                (
                    'middle_name',
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name='Отчество'
                    ),
                ),
                (
                    'is_staff',
                    models.BooleanField(
                        default=False,
                        help_text='Designates whether the user can log into this admin site.',
                        verbose_name='staff status',
                    ),
                ),
                (
                    'is_active',
                    models.BooleanField(
                        default=True,
                        help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.',
                        verbose_name='active',
                    ),
                ),
                (
                    'groups',
                    models.ManyToManyField(
                        blank=True,
                        help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                        related_name='user_set',
                        related_query_name='user',
                        to='auth.Group',
                        verbose_name='groups',
                    ),
                ),
                (
                    'user_permissions',
                    models.ManyToManyField(
                        blank=True,
                        help_text='Specific permissions for this user.',
                        related_name='user_set',
                        related_query_name='user',
                        to='auth.Permission',
                        verbose_name='user permissions',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Данные для логина',
                'verbose_name_plural': 'Данные для логина',
            },
        ),
        migrations.CreateModel(
            name='HistoricalUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                (
                    'last_login',
                    models.DateTimeField(
                        blank=True, null=True, verbose_name='last login'
                    ),
                ),
                (
                    'is_superuser',
                    models.BooleanField(
                        default=False,
                        help_text='Designates that this user has all permissions without explicitly assigning them.',
                        verbose_name='superuser status',
                    ),
                ),
                (
                    'created',
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        editable=False,
                        verbose_name='Дата создания',
                    ),
                ),
                (
                    'deleted',
                    models.BooleanField(
                        default=False, editable=False, verbose_name='Удален'
                    ),
                ),
                (
                    'id',
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                (
                    'email',
                    models.EmailField(
                        db_index=True, max_length=256, verbose_name='Email'
                    ),
                ),
                (
                    'email_verified',
                    models.BooleanField(
                        default=False, verbose_name='Email подтвержден'
                    ),
                ),
                (
                    'first_name',
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name='Имя'
                    ),
                ),
                (
                    'last_name',
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name='Фамилия'
                    ),
                ),
                (
                    'middle_name',
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name='Отчество'
                    ),
                ),
                (
                    'is_staff',
                    models.BooleanField(
                        default=False,
                        help_text='Designates whether the user can log into this admin site.',
                        verbose_name='staff status',
                    ),
                ),
                (
                    'is_active',
                    models.BooleanField(
                        default=True,
                        help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.',
                        verbose_name='active',
                    ),
                ),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                (
                    'history_type',
                    models.CharField(
                        choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')],
                        max_length=1,
                    ),
                ),
                (
                    'history_user',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='+',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                'verbose_name': 'historical Данные для логина',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddIndex(
            model_name='user',
            index=docker_django1.apps.core.models.operations.customIndex.UpperGistIndex(
                fields=['last_name', 'first_name', 'middle_name'],
                name='user_lfm_gist_up_idx',
                opclasses=['gist_trgm_ops', 'gist_trgm_ops', 'gist_trgm_ops'],
            ),
        ),
        migrations.AddIndex(
            model_name='user',
            index=docker_django1.apps.core.models.operations.customIndex.UpperIndex(
                fields=['last_name', 'first_name', 'middle_name'],
                name='user_lfm_up_idx',
                opclasses=[
                    'varchar_pattern_ops',
                    'varchar_pattern_ops',
                    'varchar_pattern_ops',
                ],
            ),
        ),
        migrations.AddIndex(
            model_name='user',
            index=docker_django1.apps.core.models.operations.customIndex.UpperGistIndex(
                fields=['email'],
                name='user_email_gist_up_idx',
                opclasses=['gist_trgm_ops'],
            ),
        ),
        migrations.AddIndex(
            model_name='user',
            index=docker_django1.apps.core.models.operations.customIndex.UpperIndex(
                fields=['email'],
                name='user_email_up_idx',
                opclasses=['varchar_pattern_ops'],
            ),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(
                fields=['last_name', 'first_name', 'middle_name'], name='user_lfm_idx'
            ),
        ),
    ]
